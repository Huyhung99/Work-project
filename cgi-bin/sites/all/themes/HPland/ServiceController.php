<?phpnamespace backend\controllers;use backend\models\CauHinh;use backend\models\DanhMuc;use backend\models\GiaoDich;use backend\models\QuanLySanPham;use backend\models\SanPham;use backend\models\Vaitrouser;use common\models\myAPI;use common\models\User;use yii\helpers\ArrayHelper;use yii\helpers\Html;use yii\helpers\Json;use yii\helpers\VarDumper;use yii\rest\Controller;use yii\web\HttpException;use yii\web\Response;class ServiceController extends Controller{    public function validate($obj){        $time = time();        $validate = 0;        for($i = 0; $i<3; $i++){            $dateTime = date('YmdHi', strtotime('-'.$i.' minutes', $time));            $token = md5(md5($dateTime.$obj['uid'].'MHS'));            if($token == $obj['token'])                $validate++;        }        if($validate == 0){            for($i = 0; $i<=1; $i++){                $dateTime = date('YmdH', strtotime('-'.$i.' hours', $time));                $token = md5(md5($dateTime.$obj['uid'].'MHS'));                if($token == $obj['token'])                    $validate++;            }        }        return $validate > 0;    }    // create-code-danh-muc    public function actionCreateCodeDanhMuc(){        $models = DanhMuc::find()->all();        /** @var DanhMuc $model */        foreach ($models as $model) {            $model->updateAttributes(['code' => myAPI::createCode($model->name), 'name' => trim($model->name)]);        }        return 0;    }    // get-all-khu-vuc    public function actionGetAllKhuVuc(){        $data = DanhMuc::findAll(['type' => 'Khu vực', 'active' => 1]);        $results = [];        foreach ($data as $item){            $results[] = ['key' => $item->id, 'name' => $item->name];        }        return $results;    }    //update-passwordhash    public function actionUpdatePasswordhash(){        $user = User::find()            ->andFilterWhere(['<=', 'id', 5273])            ->andFilterWhere(['>=', 'id', 5268])->all();        /** @var User $item */        foreach ($user as $item) {            $item->updateAttributes(['password_hash' => \Yii::$app->security->generatePasswordHash($item->id)]);            // Tạo vai trò Đại lý            Vaitrouser::deleteAll(['user_id' => $item->id]);            $model = new Vaitrouser();            $model->user_id = $item->id;            $model->vaitro_id = 3; //Đại lý            $model->save();        }    }    //get-khu-vuc    public function actionGetKhuVuc(){        $obj = $_POST;        if(count($obj) == 0){            $dataPost = file_get_contents('php://input');            $obj = Json::decode($dataPost);        }        $validate = $this->validate($obj);        if($validate > 0){            $query = DanhMuc::find()->select(['id', 'name'])                ->andFilterWhere(['type' => $obj['type'], 'active' => 1]);            if(isset($obj['parent']))                $query->andFilterWhere(['parent_id' => $obj['parent']]);            return $query->all();        }else            throw new HttpException(500, 'Không xác thực được thông tin gửi lên');//        if(isset($obj['uid'])){//            if($obj['uid'] != 0)//                $user = User::findOne(['uid' => $obj['uid']]);//            else $user = null;//            if((is_null($user) && $obj['uid'] == 0) || !is_null($user)){//                $allow = false;//                if((is_null($user) && $obj['uid'] == 0))//                    $allow = true;//                else if($user->status == 10)//                    $allow = true;//                if($allow){////                }else//                    throw new HttpException(500, 'Tài khoản đã bị khóa, vui lòng liên hệ quản trị viên để biết thêm chi tiết!.');//            }else//                throw new HttpException(500, 'Không có thông tin người dùng tương ứng');//        }//        else//            throw new HttpException(500, 'Không có thông tin người dùng');    }    //sinh-code-danh-muc    public function actionSinhCodeDanhMuc(){        $data = DanhMuc::find()->all();        /** @var DanhMuc $item */        foreach ($data as $item){            $item->updateAttributes(['code' => myAPI::createCode($item->name)]);        }    }    // save-san-pham    public function actionSaveSanPham(){        $obj = $_POST;        if(count($obj) == 0){            $dataPost = file_get_contents('php://input');            $obj = Json::decode($dataPost);        }        if(isset($obj['uid']) && isset($obj['title']) && isset($obj['nid']) && isset($obj['form_token']) && isset($obj['token'])){            $time = time();            $uid = $obj['uid'];            $user = User::findOne(['uid' => $uid]);            if(is_null($user))                throw new HttpException(500, 'Không có thông tin người dùng tương ứng');            else{                $validate = 0;                for($i = 0; $i<3; $i++){                    $dateTime = date('YmdHi', strtotime('-'.$i.' minutes', $time));                    $token = md5(md5($dateTime.$obj['uid'].$obj['title'].$obj['nid'].$obj['form_token'].'MHS'));                    if($token == $obj['token'])                        $validate++;                }                if($validate > 0){                    $model = SanPham::findOne(['nid' => $obj['node']['nid']]);                    if(is_null($model))                        $model = new SanPham();                    $model->tieu_de = $obj['node']['title'];                    $model->nid = $obj['node']['nid'];                    $arrFields = [                        'thanh_pho_id' => 'field_thanh_pho',                        'quan_id' => 'field_quan_huyen',                        'duong_pho_id' => 'field_duong_pho',                        'dia_chi' => 'field_dia_chi_du_an',                        'dia_chi_cu_the' => 'field_dia_chi_du_an',                        'chieu_dai' => 'field_chieu_dai_mb',                        'chieu_rong' => 'field_chieu_rong',                        'dien_tich' => 'field_dien_tich_mat_bang',                        'so_tang' => 'field_dien_tich_mat_bang',                        'so_giuong' => 'field_so_giuong',                        'so_phong_tam' => 'field_so_phong_tam',                        'gia_tu' => 'field_gia',                        'gia_den' => 'field_khoang_gia_den',                        'danh_sach_cac_dinh' => 'field_danh_sach_cac_dinh',                        'toa_do_vi_tri' => 'field_toa_do_vi_tri',                        'dien_thoai_chu_nha' => 'field_dien_thoai_chu_nha',                        'chu_nha' => 'field_ho_ten_chu_nha',                    ];                    foreach ($arrFields as $field => $drupalField){                        if(isset($obj['node'][$drupalField]['und'][0]))                            if(isset($obj['node'][$drupalField]['und'][0]['value']))                                $model->{$field} = $obj['node'][$drupalField]['und'][0]['value'];                    }                    $model->created = date("Y-m-d H:i:s");                    $model->user_id = $user->id;                    $model->nguoi_tao_id = $user->id;                    $model->ngay_tao = date("Y-m-d", $obj['node']['field_ngay_dang']['und'][0]['value2']);                    if(count($obj['node']['field_huong']['und']) > 0){                        $arrHuong = [];                        foreach ($obj['node']['field_huong']['und'] as $item) {                            $arrHuong[] = $item['value'];                        }                        $model->huong = implode(', ', $arrHuong);                    }                    if($model->save())                        return [                            'content' => 'Đã lưu thông tin sản phẩm thành công'                        ];                    else                        throw new HttpException(500, Html::errorSummary($model));                }else                    throw new HttpException(500, 'Không xác thực được thông tin gửi lên');            }        }        else            throw new HttpException(500, 'Dữ liệu không hợp lệ');    }    //get-san-pham    public function actionGetSanPham(){        $obj = $_POST;        if(count($obj) == 0){            $dataPost = file_get_contents('php://input');            $obj = Json::decode($dataPost);        }        $validate = $this->validate($obj);        if($validate > 0){            $dsSanPhamTimKiem = [];            $dsToaDoViTriSP = SanPham::find()                ->select(['id', 'tieu_de', 'gia_tu', 'gia_den', 'huong', 'dia_chi', 'toa_do_vi_tri', 'nid'])                ->andFilterWhere(['trang_thai'=> SanPham::DANG_BAN])                ->andFilterWhere(['active' => 1])                ->andWhere('toa_do_vi_tri is not null');            if(isset($obj['san_pham_tim_kiem'])){                if($obj['san_pham_tim_kiem'] != ''){                    $ids =  explode(',',$obj['san_pham_tim_kiem']);                    $dsToaDoViTriSP = $dsToaDoViTriSP->andFilterWhere(['not in', 'nid', $ids]);                    $dsSanPhamTimKiem = SanPham::find()                        ->select(['id', 'tieu_de', 'gia_tu', 'gia_den', 'huong', 'dia_chi', 'toa_do_vi_tri'])                        ->andFilterWhere(['trang_thai'=> SanPham::DANG_BAN])                        ->andFilterWhere(['active' => 1])                        ->andWhere('toa_do_vi_tri is not null')                        ->andFilterWhere(['in', 'nid', $ids])                        ->all();                }            }            $dsToaDoViTriSP = $dsToaDoViTriSP->all();            $dsSPcoLoThua = SanPham::find()                ->select(['id', 'tieu_de', 'gia_tu', 'gia_den', 'huong', 'dia_chi', 'danh_sach_cac_dinh'])                ->andFilterWhere(['trang_thai'=> SanPham::DANG_BAN])                ->andFilterWhere(['active' => 1])                ->andWhere('danh_sach_cac_dinh is not null')                ->all();            $arrSPCoLoThua = [];            /** @var SanPham $item */            foreach ($dsSPcoLoThua as $item){                $arr = explode('<br />', nl2br($item->danh_sach_cac_dinh));                foreach ($arr as $index => $itemArr){                    $innerArr = explode(',', $itemArr);                    $arr[$index] = [doubleval(trim($innerArr[0])), doubleval(trim($innerArr[1]))];                }                $arrSPCoLoThua[] = [                    'sanPham' => $item,                    'dinh' => $arr                ];            }            return [                'dsSanPham' => $dsToaDoViTriSP,                'dsSanPhamTimKiem' => $dsSanPhamTimKiem,                'loThuaDat' => $arrSPCoLoThua            ];        }else{            return [                'dsSanPham' => [],                'dsSanPhamTimKiem' => [],                'loThuaDat' => []            ];        }    }    //get-danh-muc    public function actionGetDanhMuc(){        $obj = $_POST;        if(count($obj) == 0){            $dataPost = file_get_contents('php://input');            $obj = Json::decode($dataPost);        }        $validate = $this->validate($obj);        if($validate > 0) {            $data = [];            if($obj['type'] == 'Khoảng giá'){                $khoangGia = CauHinh::findOne(['ghi_chu' => 'khoảng_giá'])->content;                $arrKhoangGia = explode('<br />', nl2br($khoangGia));                foreach ($arrKhoangGia as $item) {                    $data[] = ['id' => trim($item), 'name' => trim($item)];                }            }else if($obj['type'] == 'Hướng'){                foreach (SanPham::$arr_huong as $item) {                    $data[] = ['id' => trim($item), 'name' => trim($item)];                }            }            return $data;        }else            throw new HttpException(500, 'Không xác thực được thông tin gửi lên');    }    //tim-kiem-san-pham    public function actionTimKiemSanPham(){        $obj = $_POST;        if(count($obj) == 0){            $dataPost = file_get_contents('php://input');            $obj = Json::decode($dataPost);        }        $validate = $this->validate($obj);        if($validate > 0) {            $noiDungTiMKiem = implode('', [                isset($obj['thanh_pho']) ? $obj['thanh_pho'] : '',                isset($obj['quan_huyen']) ? $obj['quan_huyen'] : '',                isset($obj['duong_pho']) ? $obj['duong_pho'] : '',                isset($obj['khoang_gia']) ? $obj['khoang_gia'] : ''            ]);            if(trim($noiDungTiMKiem) == '')                throw new HttpException(500, 'Vui lòng chọn ít nhất 1 lựa chọn để tìm kiếm sản phẩm!');            else{                $model = QuanLySanPham::find();                if(isset($obj['thanh_pho']))                    $model->andFilterWhere(['thanh_pho_id' => $obj['thanh_pho']]);                if(isset($obj['quan_huyen']))                    $model->andFilterWhere(['quan_id' => $obj['quan_huyen']]);                if(isset($obj['duong_pho']))                    $model->andFilterWhere(['duong_pho_id' => $obj['duong_pho']]);                if(isset($obj['khoang_gia']))                    $model->andFilterWhere(['like', 'khoang_gia', $obj['khoang_gia']]);                if(isset($obj['huong']))                    $model->andFilterWhere(['like', 'huong', $obj['huong']]);                $model->andFilterWhere(['active' => 1, 'trang_thai' => SanPham::DANG_BAN]);                $data = ArrayHelper::map($model->all(), 'nid', 'toa_do_vi_tri');//////                $curl = curl_init();////                curl_setopt_array($curl, array(//                    CURLOPT_URL => "https://hpmap.vn/save-ket-qua-tim-kiem",//                    CURLOPT_RETURNTRANSFER => true,//                    CURLOPT_ENCODING => "",//                    CURLOPT_MAXREDIRS => 10,//                    CURLOPT_TIMEOUT => 30,//                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,//                    CURLOPT_CUSTOMREQUEST => "POST",//                    CURLOPT_POSTFIELDS => json_encode($data),//                    CURLOPT_HTTPHEADER => array(//                        "cache-control: no-cache",//                        "content-type: application/json",//                    ),//                ));////                $response = curl_exec($curl);//                curl_close($curl);                return $data;            }        }else            throw new HttpException(500, 'Không xác thực được thông tin gửi lên');    }    //send-test-email    public function actionSendTestEmail(){//        myAPI::sendMail()    }    //khoi-tao-ban-do    public function actionKhoiTaoBanDo(){        $obj = $_POST;        if(count($obj) == 0){            $dataPost = file_get_contents('php://input');            $obj = Json::decode($dataPost);        }        $validate = $this->validate($obj);        if($validate){            $dienTich = [                '< 20 m²',                '20 - 30 m²',                '30 - 40 m²',                '40 - 50 m²',                '50 - 60 m²',                '60 - 80 m²',                '80 - 100 m²',                '100 - 130 m²',                '130 - 160 m²',                '160 - 200 m²',                '200 - 250 m²',                '250 - 300 m²',                '300 - 400 m²',                '400 - 500 m²',                '500 - 700 m²',                '700 - 1.000 m²',                '1.000 - 1.500 m²',                '1.500 - 2.000 m²',                '2.000 - 3.000 m²',                '3.000 - 5.000 m²',                '5.000 - 7.000 m²',                '7.000 - 10.000 m²',                '10.000 - 20.000 m²',                '20.000 - 50.000 m²',                '50.000 - 100.000 m²',                '>= 100.000 m²'            ];            $giaTien = [                'Thỏa thuận',                '<= 2 triệu',                '2 - 3 triệu',                '3 - 5 triệu',                '5 - 7 triệu',                '7 - 10 triệu',                '10 -15 triệu',                '15 - 20 triệu',                '20 - 30 triệu',                '30 - 50 triệu',                '50 - 70 triệu',                '70 - 100 triệu',                '100 - 200 triệu',                '200 - 300 triệu',                '300 - 500 triệu',                '500 triệu - 1 tỷ',                '> 1 tỷ'            ];            $loaiBDS = [                'Cho thuê lâu dài',                'Cho thuê theo ngày giờ',                'Nhà cho người nước ngoài',                'Thuê chung - Thuê ghép',            ];            $phanLoai = [                'Mua/ Bán',                'Cho thuê',                'Sang nhượng'            ];            $huong = SanPham::$arr_huong;            return [                'dienTich' => $dienTich,                'giaTien' => $giaTien,                'loaiBDS' => $loaiBDS,                'phanLoai' => $phanLoai,                'huong' => $huong            ];        }else            return [                'dienTich' => [],                'giaTien' => [],                'loaiBDS' => [],                'phanLoai' => [],                'huong' => []            ];    }    //xem-chi-tiet-san-pham    public function actionXemChiTietSanPham()      {        $obj = $_POST;        if (count($obj) == 0) {            $dataPost = file_get_contents('php://input');            $obj = Json::decode($dataPost);        }        $validate = $this->validate($obj);        if ($validate > 0) {            $model = SanPham::findOne([$obj['san_pham']]);            return [                'content' => $this->renderPartial('../san-pham/_chi_tiet_san_pham', [                    'model' => $model                ]),                'title' => 'Chi tiết sản phẩm '.$model->tieu_de            ];        }else{            throw new HttpException(500, 'Thông tin gửi lên không chính xác');        }    }    //save-user    public function actionSaveUser(){        $obj = $_POST;        if (count($obj) == 0) {            $dataPost = file_get_contents('php://input');            $obj = Json::decode($dataPost);        }        $validate = $this->validate($obj);        if ($validate > 0) {            $user = User::findOne(['id' => $obj['uid']]);            if(is_null($user)){                throw new HttpException(500, 'Không tìm thấy thông tin người dùng');            }            $newPass = $obj['pass'];            if(!\Yii::$app->security->validatePassword($newPass, $user->password_hash)){                $user->password_hash = \Yii::$app->security->generatePasswordHash($newPass);            }            $user->hoten = (isset($obj['field_ho_ten']->und[0]) ? $obj['field_ho_ten']->und[0]->value : '');            $user->dien_thoai = (isset($obj['field_so_dien_thoai_vn']->und[0]) ? $obj['field_so_dien_thoai_vn']->und[0]->value : '');            $user->dia_chi = (isset($obj['field_dia_chi_du_an']->und[0]) ? $obj['field_dia_chi_du_an']->und[0]->value : '');            $user->nguon = 'Website';            if($user->save()){                return [                    'content'=> 'Đã lưu thành công người dùng'                ];            }            else                throw new HttpException(500, Html::errorSummary($user));        }        else        {            throw new HttpException(500, 'Thông tin gửi lên không chính xác');        }    }    //update-user    public function actionUpdateUser(){        $obj = $_POST;        if (count($obj) == 0) {            $dataPost = file_get_contents('php://input');            $obj = Json::decode($dataPost);        }        $validate = $this->validate($obj);        if ($validate > 0) {            $user = User::findOne(['username' => $obj['name']]);            if(is_null($user)){                throw new HttpException(500, 'Không tìm thấy thông tin người dùng');            }            $user->hoten = isset($obj['field_ho_ten']) ? $obj['field_ho_ten'] : '';            $user->dien_thoai = isset($obj['field_so_dien_thoai_vn']) ? $obj['field_so_dien_thoai_vn'] : '';            $user->dia_chi = isset($obj['field_dia_chi_du_an']) ? $obj['field_dia_chi_du_an'] : '';            $user->nguon = 'Website';            if($user->save()){                // Thêm 10 bài vào trong ví điện tử                $giaoDich = new GiaoDich();                $giaoDich->nguoi_nhan_id = $user->id;                $giaoDich->nguoi_thuc_hien_giao_dich_id = 1;                $giaoDich->so_tien = CauHinh::findOne(['ghi_chu' => 'so_bai_dang'])->content;                $giaoDich->created = date("Y-m-d H:i:s");                $giaoDich->noi_dung  =  'Khuyến mại đăng ký tài khoản';                $giaoDich->save();                $vaiTroUser = Vaitrouser::findOne(['user_id' => $user->id, 'vaitro_id' => 10]); // 10: Thành viên                if(is_null($vaiTroUser)){                    $vaiTroUser = new Vaitrouser();                    $vaiTroUser->vaitro_id = 10;                    $vaiTroUser->user_id = $user->id;                    $vaiTroUser->save();                }                return [                    'content'=> 'Đã lưu thành công người dùng'                ];            }            else                throw new HttpException(500, Html::errorSummary($user));        }        else        {            throw new HttpException(500, 'Thông tin gửi lên không chính xác');        }    }    //update-uid-user    public function actionUpdateUidUser(){        $obj = $_POST;        if (count($obj) == 0) {            $dataPost = file_get_contents('php://input');            $obj = Json::decode($dataPost);        }        $validate = $this->validate($obj);        if ($validate > 0) {            $user = User::findOne(['username' => $obj['name']]);            if(!is_null($user)){              $user->updateAttributes(['uid' => $obj['new_uid']]);              return [                  'content' => 'Đã lưu thông tin thành viên thành công'              ];            }            else                throw new HttpException(500, 'Không có thông tin thành viên '.$obj['name']);        }    }    /** get-list-user */    public function actionGetListUser(){        if(isset($_POST['nid'])){            $object = $_POST['nid'];        }else{            $data = file_get_contents('php://input');            $object = Json::decode($data);            if(isset($object['nid'])){                $object = $object['nid'];            }else{                throw new HttpException(500, 'Không xác thực thông tin sản phẩm');            }        }        $sanPham = SanPham::findOne(['nid' => $object]);        if(is_null($sanPham)){            return [];        }else{            if(isset($sanPham->nhanVienPhuTrach)) {                return [                    'name' => $sanPham->nhanVienPhuTrach->hoten,                    'phone' => $sanPham->nhanVienPhuTrach->dien_thoai,                ];            }else{                return [];            }        }    }    /** get-thong-tin-san-pham */    public function actionGetThongTinSanPham(){        $obj = $_POST;        if (count($obj) == 0) {            $dataPost = file_get_contents('php://input');            $obj = Json::decode($dataPost);        }        $validate = $this->validate($obj);        if ($validate > 0) {            $sanPham = SanPham::findOne([$obj['san_pham']]);            if(is_null($sanPham)){                throw new HttpException(500, 'Sản phẩm không tồn tại');            }            return [                'nguoi_ban' => [                    'ho_ten' => isset($sanPham->nhanVienBan) ? $sanPham->nhanVienBan->hoten : '',                    'dien_thoai' => isset($sanPham->nhanVienBan) ? $sanPham->nhanVienBan->dien_thoai : '',                ],                'nguoi_phu_trach' => [                    'ho_ten' => isset($sanPham->nhanVienPhuTrach) ? $sanPham->nhanVienPhuTrach->hoten : '',                    'dien_thoai' => isset($sanPham->nhanVienPhuTrach) ? $sanPham->nhanVienPhuTrach->dien_thoai : '',                ],                'san_pham' => [                    'ten' => $sanPham->tieu_de,                    'quan_huyen' => isset($sanPham->quan) ? $sanPham->quan->name : '',                    'ngay_tao' => date('d/m/Y', strtotime($sanPham->ngay_tao)),                    'gia' => $sanPham->gia_den != '' ? implode(' - ' , [                        number_format($sanPham->gia_tu, 0, '', '.'),                        number_format($sanPham->gia_den, 0, '', '.')])                        : $sanPham->gia_tu,                    'mo_ta' => $sanPham->ghi_chu,                ],                'vi_tri' => [                    'tinh_thanh' => 'Thành phố Hải Phòng',                    'quan_huyen' => isset($sanPham->quan) ? $sanPham->quan->name : '',                    'duong_pho' => isset($sanPham->duongPho) ? $sanPham->duongPho->name : '',                    'dia_chi' => $sanPham->dia_chi,                    'dia_chi_cu_the' => $sanPham->dia_chi_cu_the,                ],                'thong_tin_bat_dong_san' => [                    'chieu_dai' => number_format($sanPham->chieu_dai, 0, '', '.'),                    'chieu_rong' => number_format($sanPham->chieu_rong, 0, '', '.'),                    'dien_tich' => number_format($sanPham->dien_tich, 0, '', '.'),                    'so_tang' => number_format($sanPham->so_tang, 0, '', '.'),                    'so_can' => $sanPham->so_can,                    'huong' => $sanPham->huong,                    'duong' => $sanPham->duong,                    'gia_tu' => number_format($sanPham->gia_tu, 0, '', '.'),                    'gia_den' => number_format($sanPham->gia_den, 0, '', '.'),                ],                'thong_tin_khac' => [                    'ghi_chu_ban_import' => $sanPham->ghi_chu_ban_import,                    'phap_ly' => $sanPham->phap_ly,                    'toa_do_vi_tri' => $sanPham->toa_do_vi_tri,                    'so_phong_tam' => $sanPham->so_phong_tam,                ]            ];        }else{            throw new HttpException(500, 'Không xác thực được dữ liệu gửi lên');        }    }}